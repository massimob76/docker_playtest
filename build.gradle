plugins {
    id "com.wiredforcode.spawn" version "0.6.0"
}

apply plugin: 'java'
apply plugin: 'application'

mainClassName = "Startup"

repositories {
    jcenter()
}

configurations {
    itestCompile.extendsFrom testCompile
    itestRuntime.extendsFrom testRuntime
}

sourceSets {
    itest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output

        java.srcDir file('src/itest/java')
    }
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'org.slf4j:slf4j-simple:1.7.21'
    compile 'org.glassfish.jersey.core:jersey-server:2.22.2'
    compile 'org.glassfish.jersey.containers:jersey-container-jetty-servlet:2.22.2'
    compile 'mysql:mysql-connector-java:5.1.39'
    compile 'com.google.inject:guice:4.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.glassfish.jersey.core:jersey-client:2.22.2'
}

spawnProcess {
    command "java -cp ${sourceSets.main.runtimeClasspath.asPath} Startup iTest.properties"
    ready 'Started Application'
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.itest.output.classesDir
    classpath = sourceSets.itest.runtimeClasspath

    doFirst {
        println "starting server"
        spawnProcess.execute()
    }
}

// ensure server gets stopped even when integration tests are failing
gradle.taskGraph.afterTask { task, TaskState state ->
    if (task == integrationTest && file(".pid.lock").exists()) {
        println "stopping server"
        killProcess.execute()
    }
}

check.dependsOn integrationTest


